{"ast":null,"code":"import _slicedToArray from \"/Users/quinndarling/Desktop/beartracks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useRef, useMemo, useLayoutEffect } from 'react';\nimport invariant from 'invariant';\nimport { useMonitorOutput } from './internal/useMonitorOutput';\nimport { useDragSourceMonitor, useDragHandler } from './internal/drag';\n/**\n * useDragSource hook\n * @param sourceSpec The drag source specification *\n */\n\nexport function useDrag(spec) {\n  const specRef = useRef(spec);\n  specRef.current = spec; // TODO: wire options into createSourceConnector\n\n  invariant(spec.item != null, 'item must be defined');\n  invariant(spec.item.type != null, 'item type must be defined');\n\n  const _useDragSourceMonitor = useDragSourceMonitor(),\n        _useDragSourceMonitor2 = _slicedToArray(_useDragSourceMonitor, 2),\n        monitor = _useDragSourceMonitor2[0],\n        connector = _useDragSourceMonitor2[1];\n\n  useDragHandler(specRef, monitor, connector);\n  const result = useMonitorOutput(monitor, specRef.current.collect || (() => ({})), () => connector.reconnect());\n  const connectDragSource = useMemo(() => connector.hooks.dragSource(), [connector]);\n  const connectDragPreview = useMemo(() => connector.hooks.dragPreview(), [connector]);\n  useLayoutEffect(() => {\n    connector.dragSourceOptions = specRef.current.options || null;\n    connector.reconnect();\n  }, [connector]);\n  useLayoutEffect(() => {\n    connector.dragPreviewOptions = specRef.current.previewOptions || null;\n    connector.reconnect();\n  }, [connector]);\n  return [result, connectDragSource, connectDragPreview];\n}","map":null,"metadata":{},"sourceType":"module"}