{"ast":null,"code":"var _jsxFileName = \"/Users/quinndarling/Desktop/beartracks/src/Components/PlannerComponent/Planner.js\";\nimport React, { Component } from 'react';\nimport CategoryList from '../CategoryListComponent/CategoryList';\nimport FourYearPlan from '../FourYearPlan/FourYearPlan';\nimport user from '../../UserPlans/User.js';\nimport user2 from '../../UserPlans/User2.js';\nimport { Card, Nav } from 'react-bootstrap';\nimport { isUserWhitespacable } from '@babel/types';\n\nclass Planner extends Component {\n  constructor() {\n    super();\n    this.state = {\n      plans: {\n        user: user,\n        user2: user2\n      },\n      planNames: {\n        user: 'Data Science Plan',\n        user2: 'Second Plan'\n      },\n      selectedPlan: 'user',\n      shouldUpdate: false\n    };\n    this.onDelete = this.onDelete.bind(this);\n    this.onUpdate = this.onUpdate.bind(this);\n    this.changePlan = this.changePlan.bind(this);\n  }\n\n  onDelete() {\n    this.setState({\n      shouldUpdate: true\n    });\n  }\n\n  onUpdate() {\n    this.setState({\n      shouldUpdate: false\n    });\n  }\n\n  changePlan(plan) {\n    this.setState({\n      selectedPlan: plan\n    });\n  }\n\n  render() {\n    console.log(this.state.selectedPlan);\n    console.log(this.state.plans[this.state.selectedPlan].collegeNames.concat(this.state.plans[this.state.selectedPlan].majorNames, this.state.plans[this.state.selectedPlan].minorNames));\n    return React.createElement(\"div\", {\n      className: \"Planner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"CourseContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(CategoryList, {\n      categories: this.state.plans[this.state.selectedPlan].collegeNames.concat(this.state.plans[this.state.selectedPlan].majorNames, this.state.plans[this.state.selectedPlan].minorNames),\n      data: this.state.plans[this.state.selectedPlan].collegeData.concat(this.state.plans[this.state.selectedPlan].majorData, this.state.plans[this.state.selectedPlan].minorData),\n      onUpdate: () => this.onUpdate(),\n      shouldUpdate: this.state.shouldUpdate,\n      progress: this.state.plans[this.state.selectedPlan].totalProgress(),\n      selectedPlan: this.state.plans[this.state.selectedPlan],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    })), React.createElement(Card, {\n      className: \"PlanNav\",\n      bg: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      variant: \"tabs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, Object.keys(this.state.plans).map((plan, index) => React.createElement(Nav.Item, {\n      className: \"PlanOptionItem\",\n      style: this.state.selectedPlan === plan ? {\n        backgroundColor: '#5fa4ff'\n      } : {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      style: this.state.selectedPlan === plan ? {\n        fontWeight: 500,\n        color: 'white'\n      } : {\n        color: 'white'\n      },\n      className: \"PlanOption\",\n      onClick: () => this.changePlan(plan),\n      key: this.state.planNames[plan],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, this.state.planNames[plan]))))), React.createElement(Card.Body, {\n      className: \"PlanCardBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(FourYearPlan, {\n      semDates: generateDates(this.state.plans[this.state.selectedPlan].startSem, this.state.plans[this.state.selectedPlan].endSem),\n      onDelete: () => this.onDelete(),\n      selectedPlan: this.state.plans[this.state.selectedPlan],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Planner;\n\nfunction generateDates(start, end) {\n  let listDates = [start];\n  const splitStart = start.split(\" \");\n  let currSeason = splitStart[0];\n  let currYear = parseInt(splitStart[1], 10);\n  const splitEnd = end.split(\" \");\n  const endSeason = splitEnd[0];\n  const endYear = parseInt(splitEnd[1], 10);\n  var i = 0;\n\n  while (i < 20) {\n    if (currSeason === endSeason && currYear === endYear) {\n      break;\n    }\n\n    if (currSeason === 'Spring') {\n      currSeason = 'Fall';\n    } else {\n      currSeason = 'Spring';\n      currYear++;\n    }\n\n    listDates.push(currSeason + ' ' + currYear.toString());\n    i++;\n  }\n\n  return listDates;\n}","map":{"version":3,"sources":["/Users/quinndarling/Desktop/beartracks/src/Components/PlannerComponent/Planner.js"],"names":["React","Component","CategoryList","FourYearPlan","user","user2","Card","Nav","isUserWhitespacable","Planner","constructor","state","plans","planNames","selectedPlan","shouldUpdate","onDelete","bind","onUpdate","changePlan","setState","plan","render","console","log","collegeNames","concat","majorNames","minorNames","collegeData","majorData","minorData","totalProgress","Object","keys","map","index","backgroundColor","fontWeight","color","generateDates","startSem","endSem","start","end","listDates","splitStart","split","currSeason","currYear","parseInt","splitEnd","endSeason","endYear","i","push","toString"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport CategoryList from '../CategoryListComponent/CategoryList'\nimport FourYearPlan from '../FourYearPlan/FourYearPlan'\nimport user from '../../UserPlans/User.js'\nimport user2 from '../../UserPlans/User2.js'\nimport {Card, Nav} from 'react-bootstrap'\nimport { isUserWhitespacable } from '@babel/types';\n\nclass Planner extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            plans: {user: user,\n                     user2: user2},\n            planNames: {user: 'Data Science Plan',\n                        user2: 'Second Plan'},\n            selectedPlan: 'user',\n            shouldUpdate: false\n        }\n        this.onDelete = this.onDelete.bind(this);\n        this.onUpdate = this.onUpdate.bind(this);\n        this.changePlan = this.changePlan.bind(this);\n    }\n    onDelete() {\n        this.setState({\n            shouldUpdate: true\n        })\n    }\n\n    onUpdate() {\n        this.setState({\n            shouldUpdate: false\n        })\n    }\n\n    changePlan(plan) {\n        this.setState({\n            selectedPlan: plan\n        })\n    }\n\n    render() {\n        console.log(this.state.selectedPlan)\n        console.log(this.state.plans[this.state.selectedPlan].collegeNames.concat(this.state.plans[this.state.selectedPlan].majorNames, this.state.plans[this.state.selectedPlan].minorNames))\n        return (\n            <div className = \"Planner\">\n                <div className = \"CourseContainer\">\n                    <CategoryList \n                    categories = {this.state.plans[this.state.selectedPlan].collegeNames.concat(this.state.plans[this.state.selectedPlan].majorNames, this.state.plans[this.state.selectedPlan].minorNames)}\n                    data = {this.state.plans[this.state.selectedPlan].collegeData.concat(this.state.plans[this.state.selectedPlan].majorData, this.state.plans[this.state.selectedPlan].minorData)}\n                    onUpdate = {() => this.onUpdate()}\n                    shouldUpdate = {this.state.shouldUpdate}\n                    progress = {this.state.plans[this.state.selectedPlan].totalProgress()}\n                    selectedPlan = {this.state.plans[this.state.selectedPlan]}/>\n                </div>\n                <Card className = 'PlanNav' bg = 'primary'>\n                    <Card.Header>\n                        <Nav variant = 'tabs'>\n                            {Object.keys(this.state.plans).map((plan, index) => \n                            <Nav.Item\n                            className = 'PlanOptionItem'\n                            style = {(this.state.selectedPlan === plan)? {backgroundColor: '#5fa4ff'} : {}}>\n                                <Nav.Link\n                                style = {(this.state.selectedPlan === plan)? {fontWeight: 500, color: 'white'} : {color: 'white'}}\n                                className = 'PlanOption' \n                                onClick = {() => this.changePlan(plan)}\n                                key = {this.state.planNames[plan]}>\n                                {this.state.planNames[plan]}\n                                </Nav.Link>\n                            </Nav.Item>\n                            )}\n                        </Nav>\n                    </Card.Header>\n                    <Card.Body className = 'PlanCardBody'>\n                        <FourYearPlan\n                            semDates = {generateDates(this.state.plans[this.state.selectedPlan].startSem, this.state.plans[this.state.selectedPlan].endSem)} \n                            onDelete = {() => this.onDelete()}\n                            selectedPlan = {this.state.plans[this.state.selectedPlan]}/>\n                    </Card.Body>\n                </Card>\n            </div>\n        ) \n    }\n}\n\nexport default Planner;\n\nfunction generateDates(start, end) {\n    let listDates = [start];\n    const splitStart = start.split(\" \");\n    let currSeason =  splitStart[0];\n    let currYear = parseInt(splitStart[1], 10);\n    const splitEnd = end.split(\" \");\n    const endSeason = splitEnd[0];\n    const endYear = parseInt(splitEnd[1], 10);\n    var i = 0;\n    while (i < 20) {\n        if (currSeason === (endSeason) && currYear === endYear) {\n            break;\n        }\n        if (currSeason === 'Spring') {\n            currSeason = 'Fall';\n        } else {\n            currSeason = 'Spring';\n            currYear++;\n        }\n        listDates.push(currSeason + ' ' + currYear.toString());\n        i++;\n    }\n    return listDates\n  }"]},"metadata":{},"sourceType":"module"}