{"ast":null,"code":"import * as React from 'react';\nimport shallowEqual from 'shallowequal';\nimport hoistStatics from 'hoist-non-react-statics';\nimport invariant from 'invariant';\nimport { DndContext } from '../index';\nimport { isPlainObject } from '../utils/js_utils';\nimport { isRefable, checkDecoratorArguments } from './utils';\nexport function DragLayer(collect, options = {}) {\n  checkDecoratorArguments('DragLayer', 'collect[, options]', collect, options);\n  invariant(typeof collect === 'function', 'Expected \"collect\" provided as the first argument to DragLayer to be a function that collects props to inject into the component. ', 'Instead, received %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-layer', collect);\n  invariant(isPlainObject(options), 'Expected \"options\" provided as the second argument to DragLayer to be a plain object when specified. ' + 'Instead, received %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-layer', options);\n  return function decorateLayer(DecoratedComponent) {\n    const Decorated = DecoratedComponent;\n    const _options$arePropsEqua = options.arePropsEqual,\n          arePropsEqual = _options$arePropsEqua === void 0 ? shallowEqual : _options$arePropsEqua;\n    const displayName = Decorated.displayName || Decorated.name || 'Component';\n\n    class DragLayerContainer extends React.Component {\n      constructor() {\n        super(...arguments);\n        this.isCurrentlyMounted = false;\n        this.ref = React.createRef();\n\n        this.handleChange = () => {\n          if (!this.isCurrentlyMounted) {\n            return;\n          }\n\n          const nextState = this.getCurrentState();\n\n          if (!shallowEqual(nextState, this.state)) {\n            this.setState(nextState);\n          }\n        };\n      }\n\n      getDecoratedComponentInstance() {\n        invariant(this.ref.current, 'In order to access an instance of the decorated component, it must either be a class component or use React.forwardRef()');\n        return this.ref.current;\n      }\n\n      shouldComponentUpdate(nextProps, nextState) {\n        return !arePropsEqual(nextProps, this.props) || !shallowEqual(nextState, this.state);\n      }\n\n      componentDidMount() {\n        this.isCurrentlyMounted = true;\n        this.handleChange();\n      }\n\n      componentWillUnmount() {\n        this.isCurrentlyMounted = false;\n\n        if (this.unsubscribeFromOffsetChange) {\n          this.unsubscribeFromOffsetChange();\n          this.unsubscribeFromOffsetChange = undefined;\n        }\n\n        if (this.unsubscribeFromStateChange) {\n          this.unsubscribeFromStateChange();\n          this.unsubscribeFromStateChange = undefined;\n        }\n      }\n\n      render() {\n        return React.createElement(DndContext.Consumer, null, ({\n          dragDropManager\n        }) => {\n          if (dragDropManager === undefined) {\n            return null;\n          }\n\n          this.receiveDragDropManager(dragDropManager); // Let componentDidMount fire to initialize the collected state\n\n          if (!this.isCurrentlyMounted) {\n            return null;\n          }\n\n          return React.createElement(Decorated, Object.assign({}, this.props, this.state, {\n            ref: isRefable(Decorated) ? this.ref : null\n          }));\n        });\n      }\n\n      receiveDragDropManager(dragDropManager) {\n        if (this.manager !== undefined) {\n          return;\n        }\n\n        this.manager = dragDropManager;\n        invariant(typeof dragDropManager === 'object', 'Could not find the drag and drop manager in the context of %s. ' + 'Make sure to wrap the top-level component of your app with DragDropContext. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/troubleshooting#could-not-find-the-drag-and-drop-manager-in-the-context', displayName, displayName);\n        const monitor = this.manager.getMonitor();\n        this.unsubscribeFromOffsetChange = monitor.subscribeToOffsetChange(this.handleChange);\n        this.unsubscribeFromStateChange = monitor.subscribeToStateChange(this.handleChange);\n      }\n\n      getCurrentState() {\n        if (!this.manager) {\n          return {};\n        }\n\n        const monitor = this.manager.getMonitor();\n        return collect(monitor, this.props);\n      }\n\n    }\n\n    DragLayerContainer.displayName = \"DragLayer(\".concat(displayName, \")\");\n    DragLayerContainer.DecoratedComponent = DecoratedComponent;\n    return hoistStatics(DragLayerContainer, DecoratedComponent);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}