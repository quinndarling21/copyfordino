{"ast":null,"code":"var _jsxFileName = \"/Users/quinndarling/Desktop/beartracks/src/Components/CategoryListComponent/CategoryList.js\";\nimport React, { Component } from 'react';\nimport DivisionList from '../DivisionListComponent/DivisionList';\nimport user from '../../UserPlans/User';\nimport user2 from '../../UserPlans/User2';\nimport { Dropdown } from 'react-bootstrap';\nimport { ProgressBar } from 'react-bootstrap';\n\nclass CategoryList extends Component {\n  constructor(props) {\n    super(props); //the following categories are guaranteed for every user\n    //need to add in university later \n\n    this.state = {\n      selectedCategory: this.props.categories[0],\n      selectedCatNum: 0,\n      categories: this.props.categories,\n      dataArray: this.props.data,\n      show: false,\n      selectedPlan: this.props.selectedPlan,\n      progress: this.props.selectedPlan.totalProgress()\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.toggleDropdown = this.toggleDropdown.bind(this);\n    this.componentWillReceiveProps = this.componentWillReceiveProps.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.state.selectedPlan !== nextProps.selectedPlan) {\n      this.setState({\n        selectedCategory: nextProps.categories[0],\n        selectedCatNum: 0\n      });\n    }\n\n    this.setState({\n      selectedPlan: nextProps.selectedPlan,\n      progress: nextProps.selectedPlan.totalProgress(),\n      categories: nextProps.categories,\n      dataArray: nextProps.data\n    });\n  }\n\n  handleClick(i) {\n    this.setState({\n      selectedCategory: i,\n      selectedCatNum: this.state.categories.indexOf(i),\n      show: true\n    });\n  }\n\n  updateProgressBar() {\n    var temp = this.state.selectedPlan.totalProgress();\n    this.setState({\n      progress: temp\n    });\n  }\n\n  toggleDropdown() {\n    this.setState({\n      show: !this.state.show\n    });\n  }\n\n  findCategoryProgress(category, num) {\n    var numUnits = 0;\n    var numCompletedUnits = 0;\n    var requirements = this.state.dataArray[num][category]['Requirements'];\n\n    for (var i = 0; i < requirements.length; i++) {\n      var numCompletedUnits = numCompletedUnits + this.findUnitsTakeninRequirement(requirements[i], this.state.dataArray[num][category]['Courses']);\n      numUnits += requirements[i]['Minimum Units'];\n    }\n\n    return Math.floor(numCompletedUnits / numUnits * 100);\n  }\n\n  findUnitsTakeninRequirement(requirement, courses) {\n    let userSemCopy = this.state.selectedPlan.semesters.slice();\n    let userCourses = [].concat.apply([], userSemCopy);\n    let filteredCourses = courses.filter(a => a.Requirement === requirement['Requirement']);\n    let unitsTaken = 0;\n\n    for (let i = 0; i < filteredCourses.length; i++) {\n      for (let j = 0; j < userCourses.length; j++) {\n        if (filteredCourses[i]['Course'] === userCourses[j]['Course']) {\n          unitsTaken += filteredCourses[i]['Units'];\n        }\n      }\n    }\n\n    if (unitsTaken > requirement['Minimum Units']) {\n      return requirement['Minimum Units'];\n    } else {\n      return unitsTaken;\n    }\n  }\n\n  render() {\n    console.log(this.state.categories);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"TotalProgress\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Total Progress:\", React.createElement(ProgressBar, {\n      animated: true,\n      className: \"TotalProgressBar\",\n      now: this.props.progress,\n      label: \"\".concat(this.props.progress, \"%\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })), React.createElement(Dropdown, {\n      className: \"CategoryDropdown\",\n      onToggle: () => this.toggleDropdown(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Dropdown.Toggle, {\n      className: \"Category\",\n      id: \"DropdownToggle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.state.selectedCategory), React.createElement(Dropdown.Menu, {\n      className: \"DropdownMenu\",\n      alignRight: true,\n      style: this.state.show ? {} : {\n        display: 'none'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, this.state.categories.map((category, index) => {\n      if (category !== this.state.selectedCategory) {\n        return React.createElement(\"div\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, React.createElement(Dropdown.Item, {\n          onClick: () => this.handleClick(category),\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, category));\n      }\n    })), this.findCategoryProgress(this.state.selectedCategory, this.state.selectedCatNum), \"% Complete\"), React.createElement(\"div\", {\n      className: \"divisionList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(DivisionList, {\n      shouldUpdate: this.props.shouldUpdate,\n      onUpdate: this.props.onUpdate,\n      key: this.state.selectedCategory,\n      parent: this.state.selectedCategory,\n      data: this.state.dataArray[this.state.selectedCatNum],\n      progress: () => this.updateProgressBar(),\n      selectedPlan: this.state.selectedPlan,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default CategoryList;","map":{"version":3,"sources":["/Users/quinndarling/Desktop/beartracks/src/Components/CategoryListComponent/CategoryList.js"],"names":["React","Component","DivisionList","user","user2","Dropdown","ProgressBar","CategoryList","constructor","props","state","selectedCategory","categories","selectedCatNum","dataArray","data","show","selectedPlan","progress","totalProgress","handleClick","bind","toggleDropdown","componentWillReceiveProps","nextProps","setState","i","indexOf","updateProgressBar","temp","findCategoryProgress","category","num","numUnits","numCompletedUnits","requirements","length","findUnitsTakeninRequirement","Math","floor","requirement","courses","userSemCopy","semesters","slice","userCourses","concat","apply","filteredCourses","filter","a","Requirement","unitsTaken","j","render","console","log","display","map","index","shouldUpdate","onUpdate"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,WAAT,QAA4B,iBAA5B;;AAEA,MAAMC,YAAN,SAA2BN,SAA3B,CAAqC;AACjCO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAEf;AACA;;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,gBAAgB,EAAE,KAAKF,KAAL,CAAWG,UAAX,CAAsB,CAAtB,CADT;AAETC,MAAAA,cAAc,EAAE,CAFP;AAGTD,MAAAA,UAAU,EAAE,KAAKH,KAAL,CAAWG,UAHd;AAITE,MAAAA,SAAS,EAAE,KAAKL,KAAL,CAAWM,IAJb;AAKTC,MAAAA,IAAI,EAAE,KALG;AAMTC,MAAAA,YAAY,EAAE,KAAKR,KAAL,CAAWQ,YANhB;AAOTC,MAAAA,QAAQ,EAAE,KAAKT,KAAL,CAAWQ,YAAX,CAAwBE,aAAxB;AAPD,KAAb;AAUA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKE,yBAAL,GAAiC,KAAKA,yBAAL,CAA+BF,IAA/B,CAAoC,IAApC,CAAjC;AACH;;AAEDE,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACjC,QAAI,KAAKd,KAAL,CAAWO,YAAX,KAA4BO,SAAS,CAACP,YAA1C,EAAwD;AACpD,WAAKQ,QAAL,CAAc;AACVd,QAAAA,gBAAgB,EAAEa,SAAS,CAACZ,UAAV,CAAqB,CAArB,CADR;AAEVC,QAAAA,cAAc,EAAE;AAFN,OAAd;AAIH;;AACD,SAAKY,QAAL,CAAc;AACVR,MAAAA,YAAY,EAAEO,SAAS,CAACP,YADd;AAEVC,MAAAA,QAAQ,EAAEM,SAAS,CAACP,YAAV,CAAuBE,aAAvB,EAFA;AAGVP,MAAAA,UAAU,EAAEY,SAAS,CAACZ,UAHZ;AAIVE,MAAAA,SAAS,EAAEU,SAAS,CAACT;AAJX,KAAd;AAMD;;AAEHK,EAAAA,WAAW,CAACM,CAAD,EAAI;AACX,SAAKD,QAAL,CAAc;AACVd,MAAAA,gBAAgB,EAAEe,CADR;AAEVb,MAAAA,cAAc,EAAE,KAAKH,KAAL,CAAWE,UAAX,CAAsBe,OAAtB,CAA8BD,CAA9B,CAFN;AAGVV,MAAAA,IAAI,EAAE;AAHI,KAAd;AAKH;;AAEDY,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,IAAI,GAAG,KAAKnB,KAAL,CAAWO,YAAX,CAAwBE,aAAxB,EAAX;AACA,SAAKM,QAAL,CAAc;AACVP,MAAAA,QAAQ,EAAEW;AADA,KAAd;AAGH;;AAEDP,EAAAA,cAAc,GAAG;AACb,SAAKG,QAAL,CAAc;AACVT,MAAAA,IAAI,EAAE,CAAC,KAAKN,KAAL,CAAWM;AADR,KAAd;AAGH;;AAEDc,EAAAA,oBAAoB,CAACC,QAAD,EAAWC,GAAX,EAAgB;AAChC,QAAIC,QAAQ,GAAG,CAAf;AACA,QAAIC,iBAAiB,GAAG,CAAxB;AACA,QAAIC,YAAY,GAAG,KAAKzB,KAAL,CAAWI,SAAX,CAAqBkB,GAArB,EAA0BD,QAA1B,EAAoC,cAApC,CAAnB;;AACI,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,YAAY,CAACC,MAAjC,EAAyCV,CAAC,EAA1C,EAA8C;AAC1C,UAAIQ,iBAAiB,GAAGA,iBAAiB,GAAG,KAAKG,2BAAL,CAAiCF,YAAY,CAACT,CAAD,CAA7C,EAAkD,KAAKhB,KAAL,CAAWI,SAAX,CAAqBkB,GAArB,EAA0BD,QAA1B,EAAoC,SAApC,CAAlD,CAA5C;AACAE,MAAAA,QAAQ,IAAIE,YAAY,CAACT,CAAD,CAAZ,CAAgB,eAAhB,CAAZ;AACH;;AACL,WAAOY,IAAI,CAACC,KAAL,CAAYL,iBAAiB,GAAGD,QAArB,GAAiC,GAA5C,CAAP;AACH;;AAEDI,EAAAA,2BAA2B,CAACG,WAAD,EAAcC,OAAd,EAAuB;AAC9C,QAAIC,WAAW,GAAG,KAAKhC,KAAL,CAAWO,YAAX,CAAwB0B,SAAxB,CAAkCC,KAAlC,EAAlB;AACA,QAAIC,WAAW,GAAG,GAAGC,MAAH,CAAUC,KAAV,CAAgB,EAAhB,EAAoBL,WAApB,CAAlB;AACA,QAAIM,eAAe,GAAGP,OAAO,CAACQ,MAAR,CAAeC,CAAC,IAAIA,CAAC,CAACC,WAAF,KAAkBX,WAAW,CAAC,aAAD,CAAjD,CAAtB;AACA,QAAIY,UAAU,GAAG,CAAjB;;AACA,SAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,eAAe,CAACZ,MAApC,EAA4CV,CAAC,EAA7C,EAAiD;AAC7C,WAAK,IAAI2B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,WAAW,CAACT,MAAhC,EAAwCiB,CAAC,EAAzC,EAA6C;AACzC,YAAIL,eAAe,CAACtB,CAAD,CAAf,CAAmB,QAAnB,MAAiCmB,WAAW,CAACQ,CAAD,CAAX,CAAe,QAAf,CAArC,EAA+D;AAC3DD,UAAAA,UAAU,IAAIJ,eAAe,CAACtB,CAAD,CAAf,CAAmB,OAAnB,CAAd;AACH;AACJ;AACJ;;AACD,QAAI0B,UAAU,GAAGZ,WAAW,CAAC,eAAD,CAA5B,EAA+C;AAC3C,aAAOA,WAAW,CAAC,eAAD,CAAlB;AACH,KAFD,MAEO;AACH,aAAOY,UAAP;AACH;AACJ;;AAEDE,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK9C,KAAL,CAAWE,UAAvB;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAEI,oBAAC,WAAD;AAAa,MAAA,QAAQ,MAArB;AAAsB,MAAA,SAAS,EAAG,kBAAlC;AAAqD,MAAA,GAAG,EAAE,KAAKH,KAAL,CAAWS,QAArE;AAA+E,MAAA,KAAK,YAAO,KAAKT,KAAL,CAAWS,QAAlB,MAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,EAKI,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAC,kBAApB;AAAuC,MAAA,QAAQ,EAAI,MAAM,KAAKI,cAAL,EAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD,CAAU,MAAV;AAAiB,MAAA,SAAS,EAAG,UAA7B;AAAwC,MAAA,EAAE,EAAG,gBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKZ,KAAL,CAAWC,gBADZ,CADJ,EAII,oBAAC,QAAD,CAAU,IAAV;AAAe,MAAA,SAAS,EAAG,cAA3B;AAA0C,MAAA,UAAU,EAAI,IAAxD;AAA8D,MAAA,KAAK,EAAI,KAAKD,KAAL,CAAWM,IAAX,GAAiB,EAAjB,GAAsB;AAACyC,QAAAA,OAAO,EAAE;AAAV,OAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,KAAK/C,KAAL,CAAWE,UAAX,CAAsB8C,GAAtB,CAA0B,CAAC3B,QAAD,EAAW4B,KAAX,KAAqB;AACzC,UAAI5B,QAAQ,KAAK,KAAKrB,KAAL,CAAWC,gBAA5B,EAA8C;AAC1C,eAAO;AAAK,UAAA,GAAG,EAAEgD,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACK,oBAAC,QAAD,CAAU,IAAV;AAAe,UAAA,OAAO,EAAI,MAAM,KAAKvC,WAAL,CAAiBW,QAAjB,CAAhC;AAA6D,UAAA,GAAG,EAAI4B,KAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACK5B,QADL,CADL,CAAP;AAKH;AACJ,KARH,CADF,CAJJ,EAeS,KAAKD,oBAAL,CAA0B,KAAKpB,KAAL,CAAWC,gBAArC,EAAuD,KAAKD,KAAL,CAAWG,cAAlE,CAfT,eALJ,EAyBI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,YAAD;AACA,MAAA,YAAY,EAAI,KAAKJ,KAAL,CAAWmD,YAD3B;AAEA,MAAA,QAAQ,EAAI,KAAKnD,KAAL,CAAWoD,QAFvB;AAGA,MAAA,GAAG,EAAE,KAAKnD,KAAL,CAAWC,gBAHhB;AAIA,MAAA,MAAM,EAAE,KAAKD,KAAL,CAAWC,gBAJnB;AAKA,MAAA,IAAI,EAAE,KAAKD,KAAL,CAAWI,SAAX,CAAqB,KAAKJ,KAAL,CAAWG,cAAhC,CALN;AAMA,MAAA,QAAQ,EAAG,MAAM,KAAKe,iBAAL,EANjB;AAOA,MAAA,YAAY,EAAG,KAAKlB,KAAL,CAAWO,YAP1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAzBJ,CADJ;AAuCC;;AA/H4B;;AAkIjC,eAAeV,YAAf","sourcesContent":["import React, {Component} from 'react';\nimport DivisionList from '../DivisionListComponent/DivisionList';\nimport user from '../../UserPlans/User';\nimport user2 from '../../UserPlans/User2';\nimport { Dropdown } from 'react-bootstrap'\nimport { ProgressBar } from 'react-bootstrap'\n \nclass CategoryList extends Component {\n    constructor(props) { \n        super(props);\n        //the following categories are guaranteed for every user\n        //need to add in university later \n        this.state = {\n            selectedCategory: this.props.categories[0],\n            selectedCatNum: 0,\n            categories: this.props.categories,\n            dataArray: this.props.data,\n            show: false,\n            selectedPlan: this.props.selectedPlan,\n            progress: this.props.selectedPlan.totalProgress()\n\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.toggleDropdown = this.toggleDropdown.bind(this);\n        this.componentWillReceiveProps = this.componentWillReceiveProps.bind(this)\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.selectedPlan !== nextProps.selectedPlan) {\n            this.setState({\n                selectedCategory: nextProps.categories[0],\n                selectedCatNum: 0\n            })\n        }\n        this.setState({ \n            selectedPlan: nextProps.selectedPlan,\n            progress: nextProps.selectedPlan.totalProgress(),\n            categories: nextProps.categories,\n            dataArray: nextProps.data\n            });  \n      }\n \n    handleClick(i) {\n        this.setState({\n            selectedCategory: i,\n            selectedCatNum: this.state.categories.indexOf(i),\n            show: true\n        })\n    }\n\n    updateProgressBar() {\n        var temp = this.state.selectedPlan.totalProgress();\n        this.setState({\n            progress: temp,\n        })\n    }\n\n    toggleDropdown() {\n        this.setState({\n            show: !this.state.show\n        })\n    }\n\n    findCategoryProgress(category, num) {\n        var numUnits = 0;\n        var numCompletedUnits = 0;\n        var requirements = this.state.dataArray[num][category]['Requirements']\n            for (var i = 0; i < requirements.length; i++) {\n                var numCompletedUnits = numCompletedUnits + this.findUnitsTakeninRequirement(requirements[i], this.state.dataArray[num][category]['Courses']);\n                numUnits += requirements[i]['Minimum Units'];\n            }\n        return Math.floor((numCompletedUnits / numUnits) * 100);\n    }\n\n    findUnitsTakeninRequirement(requirement, courses) {\n        let userSemCopy = this.state.selectedPlan.semesters.slice();\n        let userCourses = [].concat.apply([], userSemCopy);\n        let filteredCourses = courses.filter(a => a.Requirement === requirement['Requirement']);\n        let unitsTaken = 0;\n        for (let i = 0; i < filteredCourses.length; i++) {\n            for (let j = 0; j < userCourses.length; j++) {\n                if (filteredCourses[i]['Course'] === userCourses[j]['Course']) {\n                    unitsTaken += filteredCourses[i]['Units'];\n                }\n            }\n        }\n        if (unitsTaken > requirement['Minimum Units']) {\n            return requirement['Minimum Units']\n        } else {\n            return unitsTaken;\n        }\n    }\n\n    render() {\n        console.log(this.state.categories)\n        return (\n            <div>\n                <div className=\"TotalProgress\">\n                    Total Progress:\n                    <ProgressBar animated className = 'TotalProgressBar' now={this.props.progress} label = {`${this.props.progress}%`} />\n                </div>\n                <Dropdown className=\"CategoryDropdown\" onToggle = {() => this.toggleDropdown()}>\n                    <Dropdown.Toggle className = \"Category\" id = 'DropdownToggle'>\n                    {this.state.selectedCategory}\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu className = \"DropdownMenu\" alignRight = {true} style = {this.state.show? {} : {display: 'none'}}>\n                     {this.state.categories.map((category, index) => {\n                            if (category !== this.state.selectedCategory) {\n                                return <div key={index}>\n                                            <Dropdown.Item onClick = {() => this.handleClick(category)}  key = {index}>\n                                                {category}\n                                            </Dropdown.Item>\n                                        </div>\n                            }\n                        })}\n                    </Dropdown.Menu>\n                        {this.findCategoryProgress(this.state.selectedCategory, this.state.selectedCatNum)}% Complete\n                </Dropdown>\n                {/* <div className=\"categoryProgress\">\n                   \n                </div> */}\n                <div className=\"divisionList\">\n                    <DivisionList \n                    shouldUpdate = {this.props.shouldUpdate}\n                    onUpdate = {this.props.onUpdate}\n                    key={this.state.selectedCategory}\n                    parent={this.state.selectedCategory}\n                    data={this.state.dataArray[this.state.selectedCatNum]}\n                    progress= {() => this.updateProgressBar()}\n                    selectedPlan ={this.state.selectedPlan}\n                    />\n                </div>\n            </div>\n        )\n        }\n    }\n\n    export default CategoryList;"]},"metadata":{},"sourceType":"module"}