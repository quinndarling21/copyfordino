{"ast":null,"code":"import invariant from 'invariant';\nimport { isPlainObject } from '../utils/js_utils';\nimport { getDecoratedComponent } from './utils';\nconst ALLOWED_SPEC_METHODS = ['canDrop', 'hover', 'drop'];\n\nclass TargetImpl {\n  constructor(spec, monitor, ref) {\n    this.spec = spec;\n    this.monitor = monitor;\n    this.ref = ref;\n    this.props = null;\n  }\n\n  receiveProps(props) {\n    this.props = props;\n  }\n\n  receiveMonitor(monitor) {\n    this.monitor = monitor;\n  }\n\n  canDrop() {\n    if (!this.spec.canDrop) {\n      return true;\n    }\n\n    return this.spec.canDrop(this.props, this.monitor);\n  }\n\n  hover() {\n    if (!this.spec.hover) {\n      return;\n    }\n\n    this.spec.hover(this.props, this.monitor, getDecoratedComponent(this.ref));\n  }\n\n  drop() {\n    if (!this.spec.drop) {\n      return undefined;\n    }\n\n    const dropResult = this.spec.drop(this.props, this.monitor, this.ref.current);\n\n    if (process.env.NODE_ENV !== 'production') {\n      invariant(typeof dropResult === 'undefined' || isPlainObject(dropResult), 'drop() must either return undefined, or an object that represents the drop result. ' + 'Instead received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drop-target', dropResult);\n    }\n\n    return dropResult;\n  }\n\n}\n\nexport default function createTargetFactory(spec) {\n  Object.keys(spec).forEach(key => {\n    invariant(ALLOWED_SPEC_METHODS.indexOf(key) > -1, 'Expected the drop target specification to only have ' + 'some of the following keys: %s. ' + 'Instead received a specification with an unexpected \"%s\" key. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drop-target', ALLOWED_SPEC_METHODS.join(', '), key);\n    invariant(typeof spec[key] === 'function', 'Expected %s in the drop target specification to be a function. ' + 'Instead received a specification with %s: %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drop-target', key, key, spec[key]);\n  });\n  return function createTarget(monitor, ref) {\n    return new TargetImpl(spec, monitor, ref);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}