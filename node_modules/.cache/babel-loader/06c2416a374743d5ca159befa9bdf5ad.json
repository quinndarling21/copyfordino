{"ast":null,"code":"import { isFunction, noop } from '../utils/js_utils';\n/**\n * Provides a set of static methods for creating Disposables.\n * @param {Function} action Action to run during the first call to dispose.\n * The action is guaranteed to be run at most once.\n */\n\nexport class Disposable {\n  constructor(action) {\n    this.isDisposed = false;\n    this.action = isFunction(action) ? action : noop;\n  }\n  /**\n   * Validates whether the given object is a disposable\n   * @param {Object} Object to test whether it has a dispose method\n   * @returns {Boolean} true if a disposable object, else false.\n   */\n\n\n  static isDisposable(d) {\n    return d && isFunction(d.dispose);\n  }\n\n  static _fixup(result) {\n    return Disposable.isDisposable(result) ? result : Disposable.empty;\n  }\n  /**\n   * Creates a disposable object that invokes the specified action when disposed.\n   * @param {Function} dispose Action to run during the first call to dispose.\n   * The action is guaranteed to be run at most once.\n   * @return {Disposable} The disposable object that runs the given action upon disposal.\n   */\n\n\n  static create(action) {\n    return new Disposable(action);\n  }\n  /** Performs the task of cleaning up resources. */\n\n\n  dispose() {\n    if (!this.isDisposed) {\n      this.action();\n      this.isDisposed = true;\n    }\n  }\n\n}\n/**\n * Gets the disposable that does nothing when disposed.\n */\n\nDisposable.empty = {\n  dispose: noop\n};\n/**\n * Represents a group of disposable resources that are disposed together.\n * @constructor\n */\n\nexport class CompositeDisposable {\n  constructor(...disposables) {\n    this.isDisposed = false;\n    this.disposables = disposables;\n  }\n  /**\n   * Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.\n   * @param {Any} item Disposable to add.\n   */\n\n\n  add(item) {\n    if (this.isDisposed) {\n      item.dispose();\n    } else {\n      this.disposables.push(item);\n    }\n  }\n  /**\n   * Removes and disposes the first occurrence of a disposable from the CompositeDisposable.\n   * @param {Any} item Disposable to remove.\n   * @returns {Boolean} true if found; false otherwise.\n   */\n\n\n  remove(item) {\n    let shouldDispose = false;\n\n    if (!this.isDisposed) {\n      const idx = this.disposables.indexOf(item);\n\n      if (idx !== -1) {\n        shouldDispose = true;\n        this.disposables.splice(idx, 1);\n        item.dispose();\n      }\n    }\n\n    return shouldDispose;\n  }\n  /**\n   *  Disposes all disposables in the group and removes them from the group but\n   *  does not dispose the CompositeDisposable.\n   */\n\n\n  clear() {\n    if (!this.isDisposed) {\n      const len = this.disposables.length;\n      const currentDisposables = new Array(len);\n\n      for (let i = 0; i < len; i++) {\n        currentDisposables[i] = this.disposables[i];\n      }\n\n      this.disposables = [];\n\n      for (let i = 0; i < len; i++) {\n        currentDisposables[i].dispose();\n      }\n    }\n  }\n  /**\n   *  Disposes all disposables in the group and removes them from the group.\n   */\n\n\n  dispose() {\n    if (!this.isDisposed) {\n      this.isDisposed = true;\n      const len = this.disposables.length;\n      const currentDisposables = new Array(len);\n\n      for (let i = 0; i < len; i++) {\n        currentDisposables[i] = this.disposables[i];\n      }\n\n      this.disposables = [];\n\n      for (let i = 0; i < len; i++) {\n        currentDisposables[i].dispose();\n      }\n    }\n  }\n\n}\n/**\n * Represents a disposable resource whose underlying disposable resource can\n * be replaced by another disposable resource, causing automatic disposal of\n * the previous underlying disposable resource.\n */\n\nexport class SerialDisposable {\n  constructor() {\n    this.isDisposed = false;\n  }\n  /**\n   * Gets the underlying disposable.\n   * @returns {Any} the underlying disposable.\n   */\n\n\n  getDisposable() {\n    return this.current;\n  }\n\n  setDisposable(value) {\n    const shouldDispose = this.isDisposed;\n\n    if (!shouldDispose) {\n      const old = this.current;\n      this.current = value;\n\n      if (old) {\n        old.dispose();\n      }\n    }\n\n    if (shouldDispose && value) {\n      value.dispose();\n    }\n  }\n  /** Performs the task of cleaning up resources. */\n\n\n  dispose() {\n    if (!this.isDisposed) {\n      this.isDisposed = true;\n      const old = this.current;\n      this.current = undefined;\n\n      if (old) {\n        old.dispose();\n      }\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}