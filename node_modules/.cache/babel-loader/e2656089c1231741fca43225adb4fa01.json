{"ast":null,"code":"var _jsxFileName = \"/Users/quinndarling/Desktop/beartracks/src/Components/Semester/Semester.js\";\nimport React, { Component } from 'react';\nimport { DropTarget } from 'react-dnd';\nimport CoursePlan from '../CoursePlan/CoursePlan.js';\nimport user from '../../UserPlans/User';\nimport user2 from '../../UserPlans/User2';\nimport { Card, Button, Dropdown } from 'react-bootstrap';\nimport { findDOMNode } from 'react-dom';\n\nfunction collect(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    hovered: monitor.isOver(),\n    Course: monitor.getItem()\n  };\n}\n\nconst targetSpec = {\n  drop(props, monitor, component) {\n    if (component.checkCanDrop(monitor.getItem())) {\n      component.handleDrop(monitor.getItem());\n    }\n\n    ;\n  }\n\n};\n\nfunction calculateUnits(courses) {\n  var sum = [0, 0];\n\n  for (let i = 0; i < courses.length; i++) {\n    sum.push(courses[i]['Units']);\n  }\n\n  return sum.reduce(getSum);\n}\n\nfunction getSum(total, num) {\n  return total + Math.round(num);\n}\n\nclass Semester extends Component {\n  constructor(props) {\n    super(props);\n\n    this.deleteDraggedCourse = course => {\n      var index = null;\n      const userSemCopy = this.state.selectedPlan.semesters.slice();\n\n      for (var i = this.state.courses.length - 1; i >= 0; i--) {\n        if (this.state.courses[i][\"Course\"] === course[\"Course\"]) {\n          index = i;\n          userSemCopy[this.props.semNum].splice(i, 1);\n          this.state.selectedPlan.semesters = userSemCopy;\n          break;\n        }\n      }\n\n      const courses = [];\n\n      for (var i = 0; i < this.state.courses.length; i++) {\n        if (i !== index) {\n          courses.push(this.state.courses[i]);\n        }\n      }\n\n      this.setState({\n        courses: courses,\n        unitCount: this.state.unitCount - course[\"Units\"]\n      });\n    };\n\n    this.state = {\n      courses: this.props.selectedPlan.semesters[this.props.semNum],\n      unitCount: calculateUnits(this.props.selectedPlan.semesters[this.props.semNum]),\n      shouldUpdate: this.props.shouldUpdate,\n      hovering: false,\n      selectedPlan: this.props.selectedPlan\n    };\n    this.handleDrop = this.handleDrop.bind(this);\n    this.deleteCourse = this.deleteCourse.bind(this);\n    this.toggleHoverOn = this.toggleHoverOn.bind(this);\n    this.toggleHoverOff = this.toggleHoverOff.bind(this);\n    this.componentWillReceiveProps = this.componentWillReceiveProps.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      selectedPlan: nextProps.selectedPlan,\n      shouldUpdate: nextProps.shouldUpdate,\n      courses: nextProps.selectedPlan.semesters[nextProps.semNum],\n      unitCount: calculateUnits(nextProps.selectedPlan.semesters[nextProps.semNum])\n    });\n  }\n\n  checkSameSemester(rootSem) {\n    return this.props.numSem === rootSem;\n  }\n\n  concatUserSems() {\n    var userSemCopy = this.state.selectedPlan.semesters.slice();\n    return [].concat.apply([], userSemCopy);\n  }\n\n  deleteCourse(course) {\n    var coursesCopy = this.state.courses;\n    var filtered = coursesCopy.filter(a => a['Course'] !== course[\"Course\"]);\n    this.setState({\n      courses: filtered,\n      unitCount: this.state.unitCount - course[\"Units\"]\n    });\n    var userSemCopy = this.state.selectedPlan.semesters[this.props.semNum].slice();\n    var index;\n\n    for (let i = 0; i < userSemCopy.length; i++) {\n      if (userSemCopy[i]['Course'] === [\"Course\"]) {\n        index = i;\n      }\n    }\n\n    userSemCopy.splice(index, 1);\n    this.state.selectedPlan.semesters[this.props.semNum] = userSemCopy;\n    this.props.onDelete();\n  }\n\n  checkCanDrop(droppedCourse) {\n    for (let i = 0; i < this.state.courses.length; i++) {\n      if (this.state.courses[i][\"RootSem\"] === droppedCourse[\"RootSem\"] && this.state.courses[i][\"Course\"] === droppedCourse[\"Course\"]) {\n        return true;\n      }\n\n      if (this.state.courses[i][\"Course\"] === droppedCourse[\"Course\"]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  handleDrop(droppedCourse) {\n    /* receives course in the following form: {'Division: ...,\n                                             'Requirement': ...,\n                                             'Course': {'Course': COMPSCI C100,\n                                                        'Units': ...,\n                                                         'Title: ...,\n                                                         'Desc': ... }}]*/\n    const courseInfo = {\n      Course: droppedCourse\n    };\n    this.setState(prevState => ({\n      courses: [...prevState.courses, courseInfo],\n      unitCount: this.state.unitCount + droppedCourse['Units']\n    })); //the following code updates the user object\n\n    let userSemCopy = this.state.selectedPlan.semesters.slice();\n    const thisSem = userSemCopy[this.props.semNum].slice();\n    thisSem.push(courseInfo);\n    userSemCopy[this.props.semNum] = thisSem;\n    this.state.selectedPlan.semesters = userSemCopy;\n    /*semesters get info in form of /*{courseInfo: {'Course': COMPSCI C100,\n                                                    'Units: ...,\n                                                    'Title': ...,\n                                                    'Desc': ...}}*/\n  }\n\n  toggleHoverOn() {\n    this.setState({\n      hovering: true\n    });\n  }\n\n  toggleHoverOff() {\n    this.setState({\n      hovering: false\n    });\n  }\n\n  calcWidth() {\n    if (this.state.selectedPlan.semesters.length > 10) {\n      return '15%';\n    }\n\n    if (this.state.selectedPlan.semesters.length > 8) {\n      return '19%';\n    }\n\n    return '24%';\n  }\n\n  render() {\n    const _this$props = this.props,\n          connectDropTarget = _this$props.connectDropTarget,\n          hovered = _this$props.hovered,\n          Course = _this$props.Course;\n    const backgroundColor = hovered ? 'lightgray' : 'white';\n    return React.createElement(Card, {\n      className: \"SemesterCard\",\n      bg: \"light\",\n      variant: \"light\",\n      ref: instance => {\n        const node = findDOMNode(instance);\n        connectDropTarget(node);\n      },\n      style: {\n        width: this.calcWidth()\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      className: \"SemesterHeader\",\n      onMouseEnter: () => this.toggleHoverOn(),\n      onMouseLeave: () => this.toggleHoverOff(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"SemesterButtonHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, this.state.hovering && React.createElement(Dropdown, {\n      size: \"sm\",\n      drop: \"left\",\n      className: \"SemesterOptionsButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(Dropdown.Toggle, {\n      variant: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), React.createElement(Dropdown.Menu, {\n      className: \"SemesterOptionsMenu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(Dropdown.Item, {\n      className: \"DeleteSemesterButton\",\n      onClick: this.state.courses.length === 0 ? () => this.props.removeSemester() : {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Remove Semester\"))), React.createElement(\"h1\", {\n      className: \"SemDate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \" \", this.props.date, \" \")), React.createElement(\"h2\", {\n      className: \"SemesterUnits\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \" Units\")), React.createElement(Card.Body, {\n      className: \"CourseTarget\",\n      style: {\n        background: backgroundColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, this.state.courses.map((course, index) => {\n      course[\"RootSem\"] = this.props.semNum;\n      return React.createElement(CoursePlan, {\n        key: course[\"Course\"] + ' ' + this.props.date + course['dropNum'],\n        handleDropOut: course => this.deleteDraggedCourse(course),\n        Course: course,\n        semNum: this.props.semNum,\n        number: course[\"Course\"],\n        units: course[\"Units\"],\n        deleteCourse: () => this.deleteCourse(course),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      });\n    })), React.createElement(Card.Footer, {\n      className: \"SemesterFooter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Total Units: \", this.state.unitCount));\n  }\n\n}\n\nexport default DropTarget(\"Course\", targetSpec, collect)(Semester);","map":{"version":3,"sources":["/Users/quinndarling/Desktop/beartracks/src/Components/Semester/Semester.js"],"names":["React","Component","DropTarget","CoursePlan","user","user2","Card","Button","Dropdown","findDOMNode","collect","connect","monitor","connectDropTarget","dropTarget","hovered","isOver","Course","getItem","targetSpec","drop","props","component","checkCanDrop","handleDrop","calculateUnits","courses","sum","i","length","push","reduce","getSum","total","num","Math","round","Semester","constructor","deleteDraggedCourse","course","index","userSemCopy","state","selectedPlan","semesters","slice","semNum","splice","setState","unitCount","shouldUpdate","hovering","bind","deleteCourse","toggleHoverOn","toggleHoverOff","componentWillReceiveProps","nextProps","checkSameSemester","rootSem","numSem","concatUserSems","concat","apply","coursesCopy","filtered","filter","a","onDelete","droppedCourse","courseInfo","prevState","thisSem","calcWidth","render","backgroundColor","instance","node","width","removeSemester","date","background","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { DropTarget } from 'react-dnd'\nimport CoursePlan from '../CoursePlan/CoursePlan.js';\nimport user from '../../UserPlans/User';\nimport user2 from '../../UserPlans/User2';\nimport {Card, Button, Dropdown} from 'react-bootstrap'\nimport { findDOMNode } from 'react-dom';\n\nfunction collect(connect, monitor) {\n    return {\n      connectDropTarget: connect.dropTarget(),\n      hovered: monitor.isOver(),\n      Course: monitor.getItem()\n    }\n  }\n\nconst targetSpec = {\n    drop(props, monitor, component) {\n        if(component.checkCanDrop(monitor.getItem())) {\n        component.handleDrop(monitor.getItem());\n    };\n    }\n}\n\nfunction calculateUnits(courses) {\n    var sum = [0, 0];\n    for (let i = 0; i < courses.length; i++) {\n        sum.push(courses[i]['Units'])\n    }\n    return sum.reduce(getSum)\n}\n\nfunction getSum(total, num) {\n    return total + Math.round(num);\n}\n\nclass Semester extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            courses: this.props.selectedPlan.semesters[this.props.semNum],\n            unitCount: calculateUnits(this.props.selectedPlan.semesters[this.props.semNum]),\n            shouldUpdate: this.props.shouldUpdate,\n            hovering: false,\n            selectedPlan: this.props.selectedPlan,\n        }\n\n        this.handleDrop = this.handleDrop.bind(this);\n        this.deleteCourse = this.deleteCourse.bind(this);\n        this.toggleHoverOn = this.toggleHoverOn.bind(this);\n        this.toggleHoverOff = this.toggleHoverOff.bind(this);\n        this.componentWillReceiveProps = this.componentWillReceiveProps.bind(this)\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({ \n            selectedPlan: nextProps.selectedPlan,\n            shouldUpdate: nextProps.shouldUpdate,\n            courses: nextProps.selectedPlan.semesters[nextProps.semNum],\n            unitCount: calculateUnits(nextProps.selectedPlan.semesters[nextProps.semNum])}) \n      }\n\n    checkSameSemester(rootSem) {\n        return this.props.numSem ===rootSem;\n    }\n\n    concatUserSems() {\n        var userSemCopy = this.state.selectedPlan.semesters.slice();\n        return [].concat.apply([], userSemCopy);\n    }\n\n    deleteCourse(course) {\n        var coursesCopy = this.state.courses;\n        var filtered = coursesCopy.filter(a => a['Course'] !== course[\"Course\"]);\n        this.setState({\n            courses: filtered,\n            unitCount: this.state.unitCount - course[\"Units\"]\n        })\n        var userSemCopy = this.state.selectedPlan.semesters[this.props.semNum].slice();\n        var index;\n        for (let i = 0; i < userSemCopy.length; i++) {\n            if (userSemCopy[i]['Course'] === [\"Course\"]) {\n                index = i;\n            }\n        }\n        userSemCopy.splice(index,1);\n        this.state.selectedPlan.semesters[this.props.semNum] = userSemCopy;\n        this.props.onDelete();\n    }\n\n    checkCanDrop(droppedCourse) {\n        for(let i = 0; i < this.state.courses.length; i++) {\n            if (this.state.courses[i][\"RootSem\"]===droppedCourse[\"RootSem\"] && this.state.courses[i][\"Course\"]===droppedCourse[\"Course\"]) {\n                return true;\n            }\n            if (this.state.courses[i][\"Course\"]===droppedCourse[\"Course\"])  {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    handleDrop(droppedCourse) {\n        /* receives course in the following form: {'Division: ...,\n                                                 'Requirement': ...,\n                                                 'Course': {'Course': COMPSCI C100,\n                                                            'Units': ...,\n                                                             'Title: ...,\n                                                             'Desc': ... }}]*/\n        const courseInfo = {Course: droppedCourse};\n        this.setState(prevState => ({\n            courses: [...prevState.courses, courseInfo],\n            unitCount: this.state.unitCount + droppedCourse['Units']\n          }))\n        //the following code updates the user object\n        let userSemCopy = this.state.selectedPlan.semesters.slice();\n        const thisSem = userSemCopy[this.props.semNum].slice();\n        thisSem.push(courseInfo);\n        userSemCopy[this.props.semNum] = thisSem;\n        this.state.selectedPlan.semesters = userSemCopy\n        /*semesters get info in form of /*{courseInfo: {'Course': COMPSCI C100,\n                                                        'Units: ...,\n                                                        'Title': ...,\n                                                        'Desc': ...}}*/\n    }\n    \n    deleteDraggedCourse = (course) => { \n        var index = null;\n        const userSemCopy = this.state.selectedPlan.semesters.slice();\n        for(var i = (this.state.courses.length - 1); i >= 0; i--) {\n            if (this.state.courses[i][\"Course\"] === course[\"Course\"]) {\n                index = i;\n                userSemCopy[this.props.semNum].splice(i,1);\n                this.state.selectedPlan.semesters = userSemCopy;\n                break;\n            }\n        }\n        const courses = []\n        for(var i = 0; i < this.state.courses.length; i++) {\n            if (i!==index) {\n                courses.push(this.state.courses[i])\n            }\n            }\n        this.setState({\n            courses: courses,\n            unitCount: this.state.unitCount - course[\"Units\"]\n        })\n    }\n\n    toggleHoverOn() {\n        this.setState({hovering: true})\n      }\n  \n      toggleHoverOff() {\n        this.setState({hovering: false})\n      }\n\n    calcWidth() {\n        if (this.state.selectedPlan.semesters.length > 10) {\n            return '15%'\n        }\n        if (this.state.selectedPlan.semesters.length > 8) {\n            return '19%'\n        }\n        return '24%'\n    }\n\n\n        \n\n    render() {\n        const { connectDropTarget, hovered, Course} = this.props;\n        const backgroundColor = hovered ? 'lightgray' : 'white';\n        return (\n                <Card className = 'SemesterCard' bg = \"light\" variant = \"light\" ref={instance => {\n                    const node = findDOMNode(instance);\n                    connectDropTarget(node);}}\n                    style = {{width: this.calcWidth()}}>\n                    <Card.Header className=\"SemesterHeader\" onMouseEnter = {() => this.toggleHoverOn()} onMouseLeave = {() => this.toggleHoverOff()}>\n                        <div className = 'SemesterButtonHeader'>\n                            {this.state.hovering && <Dropdown size = 'sm' drop = 'left' className = \"SemesterOptionsButton\">\n                                <Dropdown.Toggle variant = 'primary'></Dropdown.Toggle>\n                                <Dropdown.Menu className='SemesterOptionsMenu'>\n                                    <Dropdown.Item className = \"DeleteSemesterButton\" onClick = {(this.state.courses.length === 0)? () => this.props.removeSemester() : {}}>Remove Semester</Dropdown.Item>\n                                </Dropdown.Menu>\n                            </Dropdown>}\n                            <h1 className=\"SemDate\"> {this.props.date} </h1>\n                        </div>\n                        <h2 className=\"SemesterUnits\"> Units</h2>\n                    </Card.Header>\n                    <Card.Body className = \"CourseTarget\" style={{ background: backgroundColor}}>\n                        {this.state.courses.map((course, index)=>{\n                            course[\"RootSem\"] = this.props.semNum;\n                                return <CoursePlan \n                                key = {course[\"Course\"] + ' ' + this.props.date + course['dropNum']} \n                                handleDropOut= {(course) => this.deleteDraggedCourse(course)}\n                                Course = {course}\n                                semNum = {this.props.semNum}\n                                number = {course[\"Course\"]} \n                                units = {course[\"Units\"]}\n                                deleteCourse = {() => this.deleteCourse(course)}\n                                />\n                            })}\n                    </Card.Body>\n                    <Card.Footer className = \"SemesterFooter\">\n                        Total Units: {this.state.unitCount}\n                    </Card.Footer>\n                </Card>\n        )\n    }\n} \n\nexport default DropTarget(\"Course\", targetSpec, collect)(Semester);"]},"metadata":{},"sourceType":"module"}