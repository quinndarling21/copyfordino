{"ast":null,"code":"import EnterLeaveCounter from './EnterLeaveCounter';\nimport { isFirefox } from './BrowserDetector';\nimport { getNodeClientOffset, getEventClientOffset, getDragPreviewOffset } from './OffsetUtils';\nimport { createNativeDragSource, matchNativeItemType } from './NativeDragSources';\nimport * as NativeTypes from './NativeTypes';\nimport { OptionsReader } from './OptionsReader';\nexport default class HTML5Backend {\n  constructor(manager, globalContext) {\n    this.sourcePreviewNodes = new Map();\n    this.sourcePreviewNodeOptions = new Map();\n    this.sourceNodes = new Map();\n    this.sourceNodeOptions = new Map();\n    this.dragStartSourceIds = null;\n    this.dropTargetIds = [];\n    this.dragEnterTargetIds = [];\n    this.currentNativeSource = null;\n    this.currentNativeHandle = null;\n    this.currentDragSourceNode = null;\n    this.altKeyPressed = false;\n    this.mouseMoveTimeoutTimer = null;\n    this.asyncEndDragFrameId = null;\n    this.dragOverTargetIds = null;\n\n    this.getSourceClientOffset = sourceId => {\n      return getNodeClientOffset(this.sourceNodes.get(sourceId));\n    };\n\n    this.endDragNativeItem = () => {\n      if (!this.isDraggingNativeItem()) {\n        return;\n      }\n\n      this.actions.endDrag();\n      this.registry.removeSource(this.currentNativeHandle);\n      this.currentNativeHandle = null;\n      this.currentNativeSource = null;\n    };\n\n    this.isNodeInDocument = node => {\n      // Check the node either in the main document or in the current context\n      return this.document && this.document.body && document.body.contains(node);\n    };\n\n    this.endDragIfSourceWasRemovedFromDOM = () => {\n      const node = this.currentDragSourceNode;\n\n      if (this.isNodeInDocument(node)) {\n        return;\n      }\n\n      if (this.clearCurrentDragSourceNode()) {\n        this.actions.endDrag();\n      }\n    };\n\n    this.handleTopDragStartCapture = () => {\n      this.clearCurrentDragSourceNode();\n      this.dragStartSourceIds = [];\n    };\n\n    this.handleTopDragStart = e => {\n      if (e.defaultPrevented) {\n        return;\n      }\n\n      const dragStartSourceIds = this.dragStartSourceIds;\n      this.dragStartSourceIds = null;\n      const clientOffset = getEventClientOffset(e); // Avoid crashing if we missed a drop event or our previous drag died\n\n      if (this.monitor.isDragging()) {\n        this.actions.endDrag();\n      } // Don't publish the source just yet (see why below)\n\n\n      this.actions.beginDrag(dragStartSourceIds || [], {\n        publishSource: false,\n        getSourceClientOffset: this.getSourceClientOffset,\n        clientOffset\n      });\n      const dataTransfer = e.dataTransfer;\n      const nativeType = matchNativeItemType(dataTransfer);\n\n      if (this.monitor.isDragging()) {\n        if (dataTransfer && typeof dataTransfer.setDragImage === 'function') {\n          // Use custom drag image if user specifies it.\n          // If child drag source refuses drag but parent agrees,\n          // use parent's node as drag image. Neither works in IE though.\n          const sourceId = this.monitor.getSourceId();\n          const sourceNode = this.sourceNodes.get(sourceId);\n          const dragPreview = this.sourcePreviewNodes.get(sourceId) || sourceNode;\n\n          if (dragPreview) {\n            const _this$getCurrentSourc = this.getCurrentSourcePreviewNodeOptions(),\n                  anchorX = _this$getCurrentSourc.anchorX,\n                  anchorY = _this$getCurrentSourc.anchorY,\n                  offsetX = _this$getCurrentSourc.offsetX,\n                  offsetY = _this$getCurrentSourc.offsetY;\n\n            const anchorPoint = {\n              anchorX,\n              anchorY\n            };\n            const offsetPoint = {\n              offsetX,\n              offsetY\n            };\n            const dragPreviewOffset = getDragPreviewOffset(sourceNode, dragPreview, clientOffset, anchorPoint, offsetPoint);\n            dataTransfer.setDragImage(dragPreview, dragPreviewOffset.x, dragPreviewOffset.y);\n          }\n        }\n\n        try {\n          // Firefox won't drag without setting data\n          dataTransfer.setData('application/json', {});\n        } catch (err) {} // IE doesn't support MIME types in setData\n        // Store drag source node so we can check whether\n        // it is removed from DOM and trigger endDrag manually.\n\n\n        this.setCurrentDragSourceNode(e.target); // Now we are ready to publish the drag source.. or are we not?\n\n        const _this$getCurrentSourc2 = this.getCurrentSourcePreviewNodeOptions(),\n              captureDraggingState = _this$getCurrentSourc2.captureDraggingState;\n\n        if (!captureDraggingState) {\n          // Usually we want to publish it in the next tick so that browser\n          // is able to screenshot the current (not yet dragging) state.\n          //\n          // It also neatly avoids a situation where render() returns null\n          // in the same tick for the source element, and browser freaks out.\n          setTimeout(() => this.actions.publishDragSource(), 0);\n        } else {\n          // In some cases the user may want to override this behavior, e.g.\n          // to work around IE not supporting custom drag previews.\n          //\n          // When using a custom drag layer, the only way to prevent\n          // the default drag preview from drawing in IE is to screenshot\n          // the dragging state in which the node itself has zero opacity\n          // and height. In this case, though, returning null from render()\n          // will abruptly end the dragging, which is not obvious.\n          //\n          // This is the reason such behavior is strictly opt-in.\n          this.actions.publishDragSource();\n        }\n      } else if (nativeType) {\n        // A native item (such as URL) dragged from inside the document\n        this.beginDragNativeItem(nativeType);\n      } else if (dataTransfer && !dataTransfer.types && (e.target && !e.target.hasAttribute || !e.target.hasAttribute('draggable'))) {\n        // Looks like a Safari bug: dataTransfer.types is null, but there was no draggable.\n        // Just let it drag. It's a native type (URL or text) and will be picked up in\n        // dragenter handler.\n        return;\n      } else {\n        // If by this time no drag source reacted, tell browser not to drag.\n        e.preventDefault();\n      }\n    };\n\n    this.handleTopDragEndCapture = () => {\n      if (this.clearCurrentDragSourceNode()) {\n        // Firefox can dispatch this event in an infinite loop\n        // if dragend handler does something like showing an alert.\n        // Only proceed if we have not handled it already.\n        this.actions.endDrag();\n      }\n    };\n\n    this.handleTopDragEnterCapture = e => {\n      this.dragEnterTargetIds = [];\n      const isFirstEnter = this.enterLeaveCounter.enter(e.target);\n\n      if (!isFirstEnter || this.monitor.isDragging()) {\n        return;\n      }\n\n      const dataTransfer = e.dataTransfer;\n      const nativeType = matchNativeItemType(dataTransfer);\n\n      if (nativeType) {\n        // A native item (such as file or URL) dragged from outside the document\n        this.beginDragNativeItem(nativeType);\n      }\n    };\n\n    this.handleTopDragEnter = e => {\n      const dragEnterTargetIds = this.dragEnterTargetIds;\n      this.dragEnterTargetIds = [];\n\n      if (!this.monitor.isDragging()) {\n        // This is probably a native item type we don't understand.\n        return;\n      }\n\n      this.altKeyPressed = e.altKey;\n\n      if (!isFirefox()) {\n        // Don't emit hover in `dragenter` on Firefox due to an edge case.\n        // If the target changes position as the result of `dragenter`, Firefox\n        // will still happily dispatch `dragover` despite target being no longer\n        // there. The easy solution is to only fire `hover` in `dragover` on FF.\n        this.actions.hover(dragEnterTargetIds, {\n          clientOffset: getEventClientOffset(e)\n        });\n      }\n\n      const canDrop = dragEnterTargetIds.some(targetId => this.monitor.canDropOnTarget(targetId));\n\n      if (canDrop) {\n        // IE requires this to fire dragover events\n        e.preventDefault();\n\n        if (e.dataTransfer) {\n          e.dataTransfer.dropEffect = this.getCurrentDropEffect();\n        }\n      }\n    };\n\n    this.handleTopDragOverCapture = () => {\n      this.dragOverTargetIds = [];\n    };\n\n    this.handleTopDragOver = e => {\n      const dragOverTargetIds = this.dragOverTargetIds;\n      this.dragOverTargetIds = [];\n\n      if (!this.monitor.isDragging()) {\n        // This is probably a native item type we don't understand.\n        // Prevent default \"drop and blow away the whole document\" action.\n        e.preventDefault();\n\n        if (e.dataTransfer) {\n          e.dataTransfer.dropEffect = 'none';\n        }\n\n        return;\n      }\n\n      this.altKeyPressed = e.altKey;\n      this.actions.hover(dragOverTargetIds || [], {\n        clientOffset: getEventClientOffset(e)\n      });\n      const canDrop = (dragOverTargetIds || []).some(targetId => this.monitor.canDropOnTarget(targetId));\n\n      if (canDrop) {\n        // Show user-specified drop effect.\n        e.preventDefault();\n\n        if (e.dataTransfer) {\n          e.dataTransfer.dropEffect = this.getCurrentDropEffect();\n        }\n      } else if (this.isDraggingNativeItem()) {\n        // Don't show a nice cursor but still prevent default\n        // \"drop and blow away the whole document\" action.\n        e.preventDefault();\n      } else {\n        e.preventDefault();\n\n        if (e.dataTransfer) {\n          e.dataTransfer.dropEffect = 'none';\n        }\n      }\n    };\n\n    this.handleTopDragLeaveCapture = e => {\n      if (this.isDraggingNativeItem()) {\n        e.preventDefault();\n      }\n\n      const isLastLeave = this.enterLeaveCounter.leave(e.target);\n\n      if (!isLastLeave) {\n        return;\n      }\n\n      if (this.isDraggingNativeItem()) {\n        this.endDragNativeItem();\n      }\n    };\n\n    this.handleTopDropCapture = e => {\n      this.dropTargetIds = [];\n      e.preventDefault();\n\n      if (this.isDraggingNativeItem()) {\n        this.currentNativeSource.mutateItemByReadingDataTransfer(e.dataTransfer);\n      }\n\n      this.enterLeaveCounter.reset();\n    };\n\n    this.handleTopDrop = e => {\n      const dropTargetIds = this.dropTargetIds;\n      this.dropTargetIds = [];\n      this.actions.hover(dropTargetIds, {\n        clientOffset: getEventClientOffset(e)\n      });\n      this.actions.drop({\n        dropEffect: this.getCurrentDropEffect()\n      });\n\n      if (this.isDraggingNativeItem()) {\n        this.endDragNativeItem();\n      } else {\n        this.endDragIfSourceWasRemovedFromDOM();\n      }\n    };\n\n    this.handleSelectStart = e => {\n      const target = e.target; // Only IE requires us to explicitly say\n      // we want drag drop operation to start\n\n      if (typeof target.dragDrop !== 'function') {\n        return;\n      } // Inputs and textareas should be selectable\n\n\n      if (target.tagName === 'INPUT' || target.tagName === 'SELECT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n        return;\n      } // For other targets, ask IE\n      // to enable drag and drop\n\n\n      e.preventDefault();\n      target.dragDrop();\n    };\n\n    this.options = new OptionsReader(globalContext);\n    this.actions = manager.getActions();\n    this.monitor = manager.getMonitor();\n    this.registry = manager.getRegistry();\n    this.enterLeaveCounter = new EnterLeaveCounter(this.isNodeInDocument);\n  } // public for test\n\n\n  get window() {\n    return this.options.window;\n  }\n\n  get document() {\n    return this.options.document;\n  }\n\n  setup() {\n    if (this.window === undefined) {\n      return;\n    }\n\n    if (this.window.__isReactDndBackendSetUp) {\n      throw new Error('Cannot have two HTML5 backends at the same time.');\n    }\n\n    this.window.__isReactDndBackendSetUp = true;\n    this.addEventListeners(this.window);\n  }\n\n  teardown() {\n    if (this.window === undefined) {\n      return;\n    }\n\n    this.window.__isReactDndBackendSetUp = false;\n    this.removeEventListeners(this.window);\n    this.clearCurrentDragSourceNode();\n\n    if (this.asyncEndDragFrameId) {\n      this.window.cancelAnimationFrame(this.asyncEndDragFrameId);\n    }\n  }\n\n  connectDragPreview(sourceId, node, options) {\n    this.sourcePreviewNodeOptions.set(sourceId, options);\n    this.sourcePreviewNodes.set(sourceId, node);\n    return () => {\n      this.sourcePreviewNodes.delete(sourceId);\n      this.sourcePreviewNodeOptions.delete(sourceId);\n    };\n  }\n\n  connectDragSource(sourceId, node, options) {\n    this.sourceNodes.set(sourceId, node);\n    this.sourceNodeOptions.set(sourceId, options);\n\n    const handleDragStart = e => this.handleDragStart(e, sourceId);\n\n    const handleSelectStart = e => this.handleSelectStart(e);\n\n    node.setAttribute('draggable', 'true');\n    node.addEventListener('dragstart', handleDragStart);\n    node.addEventListener('selectstart', handleSelectStart);\n    return () => {\n      this.sourceNodes.delete(sourceId);\n      this.sourceNodeOptions.delete(sourceId);\n      node.removeEventListener('dragstart', handleDragStart);\n      node.removeEventListener('selectstart', handleSelectStart);\n      node.setAttribute('draggable', 'false');\n    };\n  }\n\n  connectDropTarget(targetId, node) {\n    const handleDragEnter = e => this.handleDragEnter(e, targetId);\n\n    const handleDragOver = e => this.handleDragOver(e, targetId);\n\n    const handleDrop = e => this.handleDrop(e, targetId);\n\n    node.addEventListener('dragenter', handleDragEnter);\n    node.addEventListener('dragover', handleDragOver);\n    node.addEventListener('drop', handleDrop);\n    return () => {\n      node.removeEventListener('dragenter', handleDragEnter);\n      node.removeEventListener('dragover', handleDragOver);\n      node.removeEventListener('drop', handleDrop);\n    };\n  }\n\n  addEventListeners(target) {\n    // SSR Fix (https://github.com/react-dnd/react-dnd/pull/813\n    if (!target.addEventListener) {\n      return;\n    }\n\n    target.addEventListener('dragstart', this.handleTopDragStart);\n    target.addEventListener('dragstart', this.handleTopDragStartCapture, true);\n    target.addEventListener('dragend', this.handleTopDragEndCapture, true);\n    target.addEventListener('dragenter', this.handleTopDragEnter);\n    target.addEventListener('dragenter', this.handleTopDragEnterCapture, true);\n    target.addEventListener('dragleave', this.handleTopDragLeaveCapture, true);\n    target.addEventListener('dragover', this.handleTopDragOver);\n    target.addEventListener('dragover', this.handleTopDragOverCapture, true);\n    target.addEventListener('drop', this.handleTopDrop);\n    target.addEventListener('drop', this.handleTopDropCapture, true);\n  }\n\n  removeEventListeners(target) {\n    // SSR Fix (https://github.com/react-dnd/react-dnd/pull/813\n    if (!target.removeEventListener) {\n      return;\n    }\n\n    target.removeEventListener('dragstart', this.handleTopDragStart);\n    target.removeEventListener('dragstart', this.handleTopDragStartCapture, true);\n    target.removeEventListener('dragend', this.handleTopDragEndCapture, true);\n    target.removeEventListener('dragenter', this.handleTopDragEnter);\n    target.removeEventListener('dragenter', this.handleTopDragEnterCapture, true);\n    target.removeEventListener('dragleave', this.handleTopDragLeaveCapture, true);\n    target.removeEventListener('dragover', this.handleTopDragOver);\n    target.removeEventListener('dragover', this.handleTopDragOverCapture, true);\n    target.removeEventListener('drop', this.handleTopDrop);\n    target.removeEventListener('drop', this.handleTopDropCapture, true);\n  }\n\n  getCurrentSourceNodeOptions() {\n    const sourceId = this.monitor.getSourceId();\n    const sourceNodeOptions = this.sourceNodeOptions.get(sourceId);\n    return {\n      dropEffect: this.altKeyPressed ? 'copy' : 'move',\n      ...(sourceNodeOptions || {})\n    };\n  }\n\n  getCurrentDropEffect() {\n    if (this.isDraggingNativeItem()) {\n      // It makes more sense to default to 'copy' for native resources\n      return 'copy';\n    }\n\n    return this.getCurrentSourceNodeOptions().dropEffect;\n  }\n\n  getCurrentSourcePreviewNodeOptions() {\n    const sourceId = this.monitor.getSourceId();\n    const sourcePreviewNodeOptions = this.sourcePreviewNodeOptions.get(sourceId);\n    return {\n      anchorX: 0.5,\n      anchorY: 0.5,\n      captureDraggingState: false,\n      ...(sourcePreviewNodeOptions || {})\n    };\n  }\n\n  isDraggingNativeItem() {\n    const itemType = this.monitor.getItemType();\n    return Object.keys(NativeTypes).some(key => NativeTypes[key] === itemType);\n  }\n\n  beginDragNativeItem(type) {\n    this.clearCurrentDragSourceNode();\n    this.currentNativeSource = createNativeDragSource(type);\n    this.currentNativeHandle = this.registry.addSource(type, this.currentNativeSource);\n    this.actions.beginDrag([this.currentNativeHandle]);\n  }\n\n  setCurrentDragSourceNode(node) {\n    this.clearCurrentDragSourceNode();\n    this.currentDragSourceNode = node; // A timeout of > 0 is necessary to resolve Firefox issue referenced\n    // See:\n    //   * https://github.com/react-dnd/react-dnd/pull/928\n    //   * https://github.com/react-dnd/react-dnd/issues/869\n\n    const MOUSE_MOVE_TIMEOUT = 1000; // Receiving a mouse event in the middle of a dragging operation\n    // means it has ended and the drag source node disappeared from DOM,\n    // so the browser didn't dispatch the dragend event.\n    //\n    // We need to wait before we start listening for mousemove events.\n    // This is needed because the drag preview needs to be drawn or else it fires an 'mousemove' event\n    // immediately in some browsers.\n    //\n    // See:\n    //   * https://github.com/react-dnd/react-dnd/pull/928\n    //   * https://github.com/react-dnd/react-dnd/issues/869\n    //\n\n    this.mouseMoveTimeoutTimer = setTimeout(() => {\n      return this.window && this.window.addEventListener('mousemove', this.endDragIfSourceWasRemovedFromDOM, true);\n    }, MOUSE_MOVE_TIMEOUT);\n  }\n\n  clearCurrentDragSourceNode() {\n    if (this.currentDragSourceNode) {\n      this.currentDragSourceNode = null;\n\n      if (this.window) {\n        this.window.clearTimeout(this.mouseMoveTimeoutTimer || undefined);\n        this.window.removeEventListener('mousemove', this.endDragIfSourceWasRemovedFromDOM, true);\n      }\n\n      this.mouseMoveTimeoutTimer = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  handleDragStart(e, sourceId) {\n    if (e.defaultPrevented) {\n      return;\n    }\n\n    if (!this.dragStartSourceIds) {\n      this.dragStartSourceIds = [];\n    }\n\n    this.dragStartSourceIds.unshift(sourceId);\n  }\n\n  handleDragEnter(e, targetId) {\n    this.dragEnterTargetIds.unshift(targetId);\n  }\n\n  handleDragOver(e, targetId) {\n    if (this.dragOverTargetIds === null) {\n      this.dragOverTargetIds = [];\n    }\n\n    this.dragOverTargetIds.unshift(targetId);\n  }\n\n  handleDrop(e, targetId) {\n    this.dropTargetIds.unshift(targetId);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}