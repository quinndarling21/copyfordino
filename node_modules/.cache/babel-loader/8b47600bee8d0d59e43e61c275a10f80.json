{"ast":null,"code":"import invariant from 'invariant';\nimport matchesType from './utils/matchesType';\nimport { getSourceClientOffset, getDifferenceFromInitialOffset } from './utils/coords';\nimport { areDirty } from './utils/dirtiness';\nexport default class DragDropMonitorImpl {\n  constructor(store, registry) {\n    this.store = store;\n    this.registry = registry;\n  }\n\n  subscribeToStateChange(listener, options = {\n    handlerIds: undefined\n  }) {\n    const handlerIds = options.handlerIds;\n    invariant(typeof listener === 'function', 'listener must be a function.');\n    invariant(typeof handlerIds === 'undefined' || Array.isArray(handlerIds), 'handlerIds, when specified, must be an array of strings.');\n    let prevStateId = this.store.getState().stateId;\n\n    const handleChange = () => {\n      const state = this.store.getState();\n      const currentStateId = state.stateId;\n\n      try {\n        const canSkipListener = currentStateId === prevStateId || currentStateId === prevStateId + 1 && !areDirty(state.dirtyHandlerIds, handlerIds);\n\n        if (!canSkipListener) {\n          listener();\n        }\n      } finally {\n        prevStateId = currentStateId;\n      }\n    };\n\n    return this.store.subscribe(handleChange);\n  }\n\n  subscribeToOffsetChange(listener) {\n    invariant(typeof listener === 'function', 'listener must be a function.');\n    let previousState = this.store.getState().dragOffset;\n\n    const handleChange = () => {\n      const nextState = this.store.getState().dragOffset;\n\n      if (nextState === previousState) {\n        return;\n      }\n\n      previousState = nextState;\n      listener();\n    };\n\n    return this.store.subscribe(handleChange);\n  }\n\n  canDragSource(sourceId) {\n    if (!sourceId) {\n      return false;\n    }\n\n    const source = this.registry.getSource(sourceId);\n    invariant(source, 'Expected to find a valid source.');\n\n    if (this.isDragging()) {\n      return false;\n    }\n\n    return source.canDrag(this, sourceId);\n  }\n\n  canDropOnTarget(targetId) {\n    // undefined on initial render\n    if (!targetId) {\n      return false;\n    }\n\n    const target = this.registry.getTarget(targetId);\n    invariant(target, 'Expected to find a valid target.');\n\n    if (!this.isDragging() || this.didDrop()) {\n      return false;\n    }\n\n    const targetType = this.registry.getTargetType(targetId);\n    const draggedItemType = this.getItemType();\n    return matchesType(targetType, draggedItemType) && target.canDrop(this, targetId);\n  }\n\n  isDragging() {\n    return Boolean(this.getItemType());\n  }\n\n  isDraggingSource(sourceId) {\n    // undefined on initial render\n    if (!sourceId) {\n      return false;\n    }\n\n    const source = this.registry.getSource(sourceId, true);\n    invariant(source, 'Expected to find a valid source.');\n\n    if (!this.isDragging() || !this.isSourcePublic()) {\n      return false;\n    }\n\n    const sourceType = this.registry.getSourceType(sourceId);\n    const draggedItemType = this.getItemType();\n\n    if (sourceType !== draggedItemType) {\n      return false;\n    }\n\n    return source.isDragging(this, sourceId);\n  }\n\n  isOverTarget(targetId, options = {\n    shallow: false\n  }) {\n    // undefined on initial render\n    if (!targetId) {\n      return false;\n    }\n\n    const shallow = options.shallow;\n\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const targetType = this.registry.getTargetType(targetId);\n    const draggedItemType = this.getItemType();\n\n    if (draggedItemType && !matchesType(targetType, draggedItemType)) {\n      return false;\n    }\n\n    const targetIds = this.getTargetIds();\n\n    if (!targetIds.length) {\n      return false;\n    }\n\n    const index = targetIds.indexOf(targetId);\n\n    if (shallow) {\n      return index === targetIds.length - 1;\n    } else {\n      return index > -1;\n    }\n  }\n\n  getItemType() {\n    return this.store.getState().dragOperation.itemType;\n  }\n\n  getItem() {\n    return this.store.getState().dragOperation.item;\n  }\n\n  getSourceId() {\n    return this.store.getState().dragOperation.sourceId;\n  }\n\n  getTargetIds() {\n    return this.store.getState().dragOperation.targetIds;\n  }\n\n  getDropResult() {\n    return this.store.getState().dragOperation.dropResult;\n  }\n\n  didDrop() {\n    return this.store.getState().dragOperation.didDrop;\n  }\n\n  isSourcePublic() {\n    return this.store.getState().dragOperation.isSourcePublic;\n  }\n\n  getInitialClientOffset() {\n    return this.store.getState().dragOffset.initialClientOffset;\n  }\n\n  getInitialSourceClientOffset() {\n    return this.store.getState().dragOffset.initialSourceClientOffset;\n  }\n\n  getClientOffset() {\n    return this.store.getState().dragOffset.clientOffset;\n  }\n\n  getSourceClientOffset() {\n    return getSourceClientOffset(this.store.getState().dragOffset);\n  }\n\n  getDifferenceFromInitialOffset() {\n    return getDifferenceFromInitialOffset(this.store.getState().dragOffset);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}