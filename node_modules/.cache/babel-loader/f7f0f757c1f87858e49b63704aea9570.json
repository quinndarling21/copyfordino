{"ast":null,"code":"var _jsxFileName = \"/Users/quinndarling/Desktop/beartracks/src/Components/RequirementComponent/Requirement.js\";\nimport React, { Component } from 'react';\nimport Catalog from '../../CATALOG.js';\nimport CourseButton from '../CourseButtonComponent/CourseButton';\nimport { Accordion } from 'react-bootstrap';\nimport { Card } from 'react-bootstrap';\nimport user from '../../UserPlans/User';\nimport user2 from '../../UserPlans/User2';\nimport { string } from 'prop-types';\n\nclass Requirement extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isClicked: this.props.isClicked,\n      courses: this.props.courseData.filter(a => a.Requirement === this.props.requirementTitle),\n      completedCourses: [],\n      selectedCourse: \"\",\n      shouldUpdate: this.props.shouldUpdate,\n      selectedPlan: this.props.selectedPlan\n    };\n    this.swapIsClicked = this.swapIsClicked.bind(this);\n    this.checkCompletedCourses = this.checkCompletedCourses.bind(this);\n    this.componentWillReceiveProps = this.componentWillReceiveProps.bind(this);\n    this.setSelectedCourse = this.setSelectedCourse.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      semDates: nextProps.semDates,\n      isClicked: nextProps.isClicked,\n      courses: nextProps.courseData.filter(a => a.Requirement === nextProps.requirementTitle),\n      shouldUpdate: nextProps.shouldUpdate,\n      selectedPlan: nextProps.selectedPlan\n    });\n  }\n\n  checkCompletedCourses() {\n    let userSemCopy = this.state.selectedPlan.semesters.slice();\n    let userCourses = [].concat.apply([], userSemCopy);\n    let Courses = this.props.courseData.filter(a => a.Requirement === this.props.requirementTitle);\n    let compCourse = [];\n    let coursesCopy = Courses.slice();\n\n    for (let i = Courses.length - 1; i >= 0; i--) {\n      for (let j = userCourses.length - 1; j >= 0; j--) {\n        if (Courses[i]['Course']['Course'] === userCourses[j]['Course']['Course']) {\n          compCourse.push(userCourses[j]);\n          coursesCopy.splice(coursesCopy.indexOf(Courses[i]['Course']['Course']));\n        }\n      }\n    }\n\n    this.setState({\n      courses: coursesCopy,\n      completedCourses: compCourse\n    });\n    this.props.progress();\n    this.props.onUpdate();\n  }\n\n  swapIsClicked() {\n    if (this.state.isClicked === true) {\n      this.setState({\n        isClicked: false\n      });\n    } else {\n      this.setState({\n        isClicked: true\n      });\n    }\n  }\n\n  setSelectedCourse(course) {\n    debugger;\n    this.setState({\n      selectedCourse: course\n    });\n  }\n\n  render() {\n    let userSemCopy = this.state.selectedPlan.semesters.slice();\n    let userCourses = [].concat.apply([], userSemCopy);\n    let Courses = this.props.courseData.filter(a => a.Requirement === this.props.requirementTitle);\n    let compCourse = [];\n    let coursesCopy = Courses.slice();\n\n    for (let i = 0; i < Courses.length; i++) {\n      for (let j = 0; j < userCourses.length; j++) {\n        console.log(Courses[i]['Course']['Course']);\n\n        if (Courses[i]['Course']['Course'] === userCourses[j]['Course']['Course']) {\n          compCourse.push(userCourses[j]);\n          let correctInt;\n\n          for (let k = 0; k < coursesCopy.length; k++) {\n            if (coursesCopy[k]['Course']['Course'] === Courses[i]['Course']['Course']) {\n              correctInt = k;\n            }\n          }\n\n          coursesCopy.splice(correctInt, 1);\n        }\n      }\n    } // for (let i = 0; i < Courses.length; i++) {\n    //     for (let j = 0; j < this.state.selectedPlanCourses.length; j++) {\n    //         if (Courses[i]['Course'] === this.state.selectedPlanCourses[j]['Course']) {\n    //             compCourse.push(Courses[i]);\n    //             Courses.splice(i, 1);\n    //             if (Courses.length === 1) {\n    //                 continue;\n    //             }\n    //             if (Courses.length === 0) {\n    //                 break;\n    //             }\n    //         }\n    //     }\n    // }\n\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Card.Header,\n      eventKey: this.props.index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, compCourse.length, \"/\", this.props.numClasses, \" - \", this.props.requirementTitle), compCourse.map((course, index) => React.createElement(Accordion.Collapse, {\n      key: this.state.selectedPlan + this.props.requirementTitle + index,\n      eventKey: this.props.index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      className: \"CompletedCourseInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, course['Course']['Course'], \": \", course['Course']['Units'], \" Units\"))), coursesCopy.map((course, index) => React.createElement(Accordion.Collapse, {\n      key: this.state.selectedPlan + course + index,\n      eventKey: this.props.index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Card, {\n      as: CourseButton,\n      Course: course,\n      courseNumber: course['Course']['Course'],\n      courseTitle: course['Course']['Title'],\n      courseUnits: course['Course']['Units'],\n      key: course['Course']['Title'],\n      handleDrop: () => this.checkCompletedCourses(),\n      handleClick: () => this.setSelectedCourse(course),\n      isSelected: this.state.selectedCourse === course,\n      courseDescription: course['Course']['Desc'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    })))));\n  }\n\n}\n/*{this.state.isClicked && \n        <div className=\"requirementContainer\">\n            {this.state.completedCourses.map((course, index)=> (\n                <div className = 'CompletedCourse'>\n                    <h1 className = 'CompletedCourseInfo'>{course['Course']}: {course['Units']} Units</h1>\n                </div>\n            ))}*/\n\n\nexport default Requirement;","map":{"version":3,"sources":["/Users/quinndarling/Desktop/beartracks/src/Components/RequirementComponent/Requirement.js"],"names":["React","Component","Catalog","CourseButton","Accordion","Card","user","user2","string","Requirement","constructor","props","state","isClicked","courses","courseData","filter","a","requirementTitle","completedCourses","selectedCourse","shouldUpdate","selectedPlan","swapIsClicked","bind","checkCompletedCourses","componentWillReceiveProps","setSelectedCourse","nextProps","setState","semDates","userSemCopy","semesters","slice","userCourses","concat","apply","Courses","compCourse","coursesCopy","i","length","j","push","splice","indexOf","progress","onUpdate","course","render","console","log","correctInt","k","Header","index","numClasses","map"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Catalog from '../../CATALOG.js'\nimport CourseButton from '../CourseButtonComponent/CourseButton';\nimport { Accordion } from 'react-bootstrap';\nimport { Card } from 'react-bootstrap';\nimport user from '../../UserPlans/User';\nimport user2 from '../../UserPlans/User2';\nimport { string } from 'prop-types';\n\nclass Requirement extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isClicked: this.props.isClicked,\n            courses: this.props.courseData.filter(a => a.Requirement === this.props.requirementTitle),\n            completedCourses: [],\n            selectedCourse: \"\",\n            shouldUpdate: this.props.shouldUpdate,\n            selectedPlan: this.props.selectedPlan\n        };\n        this.swapIsClicked = this.swapIsClicked.bind(this);\n        this.checkCompletedCourses = this.checkCompletedCourses.bind(this);\n        this.componentWillReceiveProps = this.componentWillReceiveProps.bind(this);\n        this.setSelectedCourse = this.setSelectedCourse.bind(this);\n    } \n\n    componentWillReceiveProps(nextProps) {\n        this.setState({ \n            semDates: nextProps.semDates,\n            isClicked: nextProps.isClicked,\n            courses: nextProps.courseData.filter(a => a.Requirement === nextProps.requirementTitle),\n            shouldUpdate: nextProps.shouldUpdate,\n            selectedPlan: nextProps.selectedPlan})  \n      }\n\n    checkCompletedCourses() {\n        let userSemCopy = this.state.selectedPlan.semesters.slice();\n        let userCourses = [].concat.apply([], userSemCopy);\n        let Courses = this.props.courseData.filter(a => a.Requirement === this.props.requirementTitle);\n        let compCourse = [];\n        let coursesCopy = Courses.slice();\n        for (let i = Courses.length -1 ; i >= 0; i--) {\n            for (let j = userCourses.length -1; j >= 0; j--) {\n                if(Courses[i]['Course']['Course'] === userCourses[j]['Course']['Course']) {\n                    compCourse.push(userCourses[j]);\n                    coursesCopy.splice(coursesCopy.indexOf(Courses[i]['Course']['Course']));\n                }\n            }\n        }\n        this.setState({\n            courses: coursesCopy,\n            completedCourses: compCourse\n        })\n        this.props.progress();\n        this.props.onUpdate();\n    }\n\n    swapIsClicked() {\n        if(this.state.isClicked === true) {\n            this.setState({isClicked: false})\n        } else {\n            this.setState({isClicked: true})\n        }\n    }\n\n    setSelectedCourse(course) {\n        debugger;\n        this.setState({\n            selectedCourse: course\n        })\n    }\n \n    render() {\n        let userSemCopy = this.state.selectedPlan.semesters.slice();\n        let userCourses = [].concat.apply([], userSemCopy);\n        let Courses = this.props.courseData.filter(a => a.Requirement === this.props.requirementTitle);\n        let compCourse = [];\n        let coursesCopy = Courses.slice();\n\n        for (let i = 0; i < Courses.length; i++) {\n            for (let j = 0; j < userCourses.length; j++) {\n                console.log(Courses[i]['Course']['Course'])\n                if(Courses[i]['Course']['Course'] === userCourses[j]['Course']['Course']) {\n                    compCourse.push(userCourses[j])\n                    let correctInt;\n                    for (let k = 0; k < coursesCopy.length; k++) {\n                        if (coursesCopy[k]['Course']['Course'] === Courses[i]['Course']['Course']) {\n                            correctInt = k;\n                        }\n                    }\n                    coursesCopy.splice(correctInt,1);\n                }\n            }\n        }\n\n\n        // for (let i = 0; i < Courses.length; i++) {\n        //     for (let j = 0; j < this.state.selectedPlanCourses.length; j++) {\n        //         if (Courses[i]['Course'] === this.state.selectedPlanCourses[j]['Course']) {\n        //             compCourse.push(Courses[i]);\n        //             Courses.splice(i, 1);\n        //             if (Courses.length === 1) {\n        //                 continue;\n        //             }\n        //             if (Courses.length === 0) {\n        //                 break;\n        //             }\n        //         }\n        //     }\n        // }\n\n        return (\n            <div>\n                <Card>\n                    <Accordion.Toggle as={Card.Header} eventKey={this.props.index}>\n                        {compCourse.length}/{this.props.numClasses} - {this.props.requirementTitle}\n                    </Accordion.Toggle>\n                    {compCourse.map((course, index)=> (\n                        <Accordion.Collapse key = {this.state.selectedPlan + this.props.requirementTitle + index} eventKey={this.props.index}>\n                            <Card.Body className = 'CompletedCourseInfo'>\n                                {course['Course']['Course']}: {course['Course']['Units']} Units\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    ))}\n                    {coursesCopy.map((course, index)=> (\n                    <Accordion.Collapse key = {this.state.selectedPlan + course + index} eventKey={this.props.index}>\n                        <Card as={CourseButton}\n                            Course={course}\n                            courseNumber={course['Course']['Course']}\n                            courseTitle={course['Course']['Title']}\n                            courseUnits={course['Course']['Units']} \n                            key = {course['Course']['Title']}\n                            handleDrop={() => this.checkCompletedCourses()}\n                            handleClick = {() => this.setSelectedCourse(course)}\n                            isSelected = {this.state.selectedCourse === course}\n                            courseDescription = {course['Course']['Desc']}>\n                        </Card>\n                    </Accordion.Collapse>\n                        ))}\n                </Card>\n            </div>\n            )\n    } \n}\n\n        /*{this.state.isClicked && \n                <div className=\"requirementContainer\">\n                    {this.state.completedCourses.map((course, index)=> (\n                        <div className = 'CompletedCourse'>\n                            <h1 className = 'CompletedCourseInfo'>{course['Course']}: {course['Units']} Units</h1>\n                        </div>\n                    ))}*/\n    \n\n    export default Requirement;"]},"metadata":{},"sourceType":"module"}