{"ast":null,"code":"import _slicedToArray from \"/Users/quinndarling/Desktop/beartracks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useMemo, useLayoutEffect } from 'react';\nimport invariant from 'invariant';\nimport { registerSource } from '../../common/registration';\nimport { useDragDropManager } from './useDragDropManager';\nimport { DragSourceMonitorImpl } from '../../common/DragSourceMonitorImpl';\nimport { SourceConnector } from '../../common/SourceConnector';\nexport function useDragSourceMonitor() {\n  const manager = useDragDropManager();\n  const monitor = useMemo(() => new DragSourceMonitorImpl(manager), [manager]);\n  const connector = useMemo(() => new SourceConnector(manager.getBackend()), [manager]);\n  return [monitor, connector];\n}\nexport function useDragHandler(spec, monitor, connector) {\n  const manager = useDragDropManager();\n  const handler = useMemo(() => {\n    return {\n      beginDrag() {\n        const _spec$current = spec.current,\n              begin = _spec$current.begin,\n              item = _spec$current.item;\n\n        if (begin) {\n          const beginResult = begin(monitor);\n          invariant(beginResult == null || typeof beginResult === 'object', 'dragSpec.begin() must either return an object, undefined, or null');\n          return beginResult || item || {};\n        }\n\n        return item || {};\n      },\n\n      canDrag() {\n        if (typeof spec.current.canDrag === 'boolean') {\n          return spec.current.canDrag;\n        } else if (typeof spec.current.canDrag === 'function') {\n          return spec.current.canDrag(monitor);\n        } else {\n          return true;\n        }\n      },\n\n      isDragging(globalMonitor, target) {\n        const isDragging = spec.current.isDragging;\n        return isDragging ? isDragging(monitor) : target === globalMonitor.getSourceId();\n      },\n\n      endDrag() {\n        const end = spec.current.end;\n\n        if (end) {\n          end(monitor.getItem(), monitor);\n        }\n\n        connector.reconnect();\n      }\n\n    };\n  }, []);\n  useLayoutEffect(function registerHandler() {\n    const _registerSource = registerSource(spec.current.item.type, handler, manager),\n          _registerSource2 = _slicedToArray(_registerSource, 2),\n          handlerId = _registerSource2[0],\n          unregister = _registerSource2[1];\n\n    monitor.receiveHandlerId(handlerId);\n    connector.receiveHandlerId(handlerId);\n    return unregister;\n  }, []);\n}","map":null,"metadata":{},"sourceType":"module"}